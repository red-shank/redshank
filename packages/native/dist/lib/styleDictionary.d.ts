import { ViewStyle, TextStyle, DimensionValue } from 'react-native';
import { ColorType, FontSizesProps, ZIndexType } from '../context/theme/types';
declare type ViewStyleKeys = {
    width: ViewStyle['width'];
    height: ViewStyle['height'];
    position: ViewStyle['position'];
    paddingBottom: ViewStyle['paddingBottom'];
    paddingHorizontal: ViewStyle['paddingHorizontal'];
    paddingLeft: ViewStyle['paddingLeft'];
    paddingRight: ViewStyle['paddingRight'];
    paddingTop: ViewStyle['paddingTop'];
    paddingVertical: ViewStyle['paddingVertical'];
    margin: ViewStyle['margin'];
    marginBottom: ViewStyle['marginBottom'];
    marginHorizontal: ViewStyle['marginHorizontal'];
    marginLeft: ViewStyle['marginLeft'];
    marginRight: ViewStyle['marginRight'];
    marginTop: ViewStyle['marginTop'];
    marginVertical: ViewStyle['marginVertical'];
    bottom: ViewStyle['bottom'];
    left: ViewStyle['left'];
    right: ViewStyle['right'];
    top: ViewStyle['top'];
    flex: ViewStyle['flex'];
    flexGrow: ViewStyle['flexGrow'];
    flexShrink: ViewStyle['flexShrink'];
    flexBasis: ViewStyle['flexBasis'];
    flexWrap: ViewStyle['flexWrap'];
    flexDirection: ViewStyle['flexDirection'];
    justifyContent: ViewStyle['justifyContent'];
    alignItems: ViewStyle['alignItems'];
    alignSelf: ViewStyle['alignSelf'];
    overflow: ViewStyle['overflow'];
    display: ViewStyle['display'];
    backfaceVisibility: ViewStyle['backfaceVisibility'];
    opacity: ViewStyle['opacity'];
    elevation: ViewStyle['elevation'];
    shadowOffset: ViewStyle['shadowOffset'];
    shadowOpacity: ViewStyle['shadowOpacity'];
    shadowRadius: ViewStyle['shadowRadius'];
    transform: ViewStyle['transform'];
    transformMatrix: ViewStyle['transformMatrix'];
    scaleX: ViewStyle['scaleX'];
    scaleY: ViewStyle['scaleY'];
    rotation: ViewStyle['rotation'];
    translateX: ViewStyle['translateX'];
    translateY: ViewStyle['translateY'];
    textAlign: TextStyle['textAlign'];
    textAlignVertical: TextStyle['textAlignVertical'];
    fontFamily: TextStyle['fontFamily'];
    fontStyle: TextStyle['fontStyle'];
    fontWeight: TextStyle['fontWeight'];
    fontVariant: TextStyle['fontVariant'];
    textShadowOffset: TextStyle['textShadowOffset'];
    textShadowRadius: TextStyle['textShadowRadius'];
    letterSpacing: TextStyle['letterSpacing'];
    lineHeight: TextStyle['lineHeight'];
    borderBottomWidth: ViewStyle['borderBottomWidth'];
    borderLeftWidth: ViewStyle['borderLeftWidth'];
    borderRightWidth: ViewStyle['borderRightWidth'];
    borderTopWidth: ViewStyle['borderTopWidth'];
    borderWidth: ViewStyle['borderWidth'];
    borderStyle: ViewStyle['borderStyle'];
};
declare type CustomStyleKeys = {
    p: ViewStyle['padding'];
    pt: ViewStyle['paddingTop'];
    pb: ViewStyle['paddingBottom'];
    pl: ViewStyle['paddingLeft'];
    pr: ViewStyle['paddingRight'];
    px: ViewStyle['paddingHorizontal'];
    py: ViewStyle['paddingVertical'];
    m: ViewStyle['margin'];
    mt: ViewStyle['marginTop'];
    mb: ViewStyle['marginBottom'];
    ml: ViewStyle['marginLeft'];
    mr: ViewStyle['marginRight'];
    mx: ViewStyle['marginHorizontal'];
    my: ViewStyle['marginVertical'];
    gap: ViewStyle['gap'];
    backgroundColor: ColorType;
    borderBottomColor: ColorType;
    borderColor: ColorType;
    borderLeftColor: ColorType;
    borderRightColor: ColorType;
    borderTopColor: ColorType;
    shadowColor: ColorType;
    textShadowColor: ColorType;
    background: ColorType;
    bg: ColorType;
    color: ColorType;
    zIndex: keyof ZIndexType | ViewStyle['zIndex'];
    fontSize: FontSizesProps;
    borderRadius: ViewStyle['borderRadius'];
    borderBottomRadius: ViewStyle['borderRadius'];
    borderTopRadius: ViewStyle['borderRadius'];
    borderBottomLeftRadius: ViewStyle['borderBottomLeftRadius'];
    borderBottomRightRadius: ViewStyle['borderBottomRightRadius'];
    borderTopLeftRadius: ViewStyle['borderTopLeftRadius'];
    borderTopRightRadius: ViewStyle['borderTopRightRadius'];
};
declare type ViewStyleValue = {
    type: 'inherit' | 'color' | 'number' | 'string';
    resolve?: (value: DimensionValue | number | string | ColorType, acc: ViewStyle) => DimensionValue | ViewStyle;
};
export declare type SxKeys = keyof ViewStyleKeys & keyof CustomStyleKeys;
export declare type SxProps = Partial<ViewStyleKeys & CustomStyleKeys>;
declare type StyleKeysSupported = {
    properties: Record<SxKeys, ViewStyleValue>;
};
declare const styleDictionary: StyleKeysSupported;
export declare const resolverDictionaryKey: Record<keyof CustomStyleKeys, string>;
export default styleDictionary;
